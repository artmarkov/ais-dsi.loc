<?php

namespace common\models\question;

use artsoft\helpers\ArtHelper;
use artsoft\helpers\DocTemplate;
use artsoft\models\User;
use common\widgets\qrcode\QRcode;
use common\widgets\qrcode\widgets\Link;
use kartik\date\DatePicker;
use kartik\datetime\DateTimePicker;
use Yii;
use yii\base\DynamicModel;
use yii\helpers\ArrayHelper;
use yii\helpers\StringHelper;
use yii\web\UploadedFile;
use yii\widgets\MaskedInput;

class QuestionAnswers extends DynamicModel
{
    public $id;
    public $model;
    public $objectId;
    public $models;
    private $attributes;
    private $attributesTypes;
    private $attributesUnique;
    private $optionsValues;
    private $fileSize = 1024 * 1024 * 5; // Допустимый размер файла
    private $fileExt = 'txt, png, jpg, JPEG, doc, docx, xls, xlsx, ppt, pptx, ppsx, pdf, mp3, mp4'; // Допустимые расширения
    const fileIcon = [
        'txt' => 'iVBORw0KGgoAAAANSUhEUgAAAJIAAACnCAYAAAD6zAWQAAABJmlDQ1BBZG9iZSBSR0IgKDE5OTgpAAAoz2NgYDJwdHFyZRJgYMjNKykKcndSiIiMUmA/z8DGwMwABonJxQWOAQE+IHZefl4qAwb4do2BEURf1gWZxUAa4EouKCoB0n+A2CgltTiZgYHRAMjOLi8pAIozzgGyRZKywewNIHZRSJAzkH0EyOZLh7CvgNhJEPYTELsI6Akg+wtIfTqYzcQBNgfClgGxS1IrQPYyOOcXVBZlpmeUKBhaWloqOKbkJ6UqBFcWl6TmFit45iXnFxXkFyWWpKYA1ULcBwaCEIWgENMAarTQZKAyAMUDhPU5EBy+jGJnEGIIkFxaVAZlMjIZE+YjzJgjwcDgv5SBgeUPQsykl4FhgQ4DA/9UhJiaIQODgD4Dw745AMDGT/0ZOjZcAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFyWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNi4wLWMwMDYgNzkuZGFiYWNiYiwgMjAyMS8wNC8xNC0wMDozOTo0NCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIyLjQgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNC0xMi0xMlQxMTozOTo0MiswMzowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjQtMTItMTJUMTE6NDE6MzArMDM6MDAiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjQtMTItMTJUMTE6NDE6MzArMDM6MDAiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjBlMDVlYjZiLTRlNDMtYjk0ZS04NGU5LWZkNjdiYzJmYjA2ZSIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOjY1NGI2NjRkLTRjNjktNGY0Zi05ZGRhLThhMjg0ZTdkNjE5ZSIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjY2NTUzNDU2LWNmNjctNDg0ZC05OTg4LTcxMTljMzY2OGQ0YyI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NjY1NTM0NTYtY2Y2Ny00ODRkLTk5ODgtNzExOWMzNjY4ZDRjIiBzdEV2dDp3aGVuPSIyMDI0LTEyLTEyVDExOjM5OjQyKzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjIuNCAoV2luZG93cykiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjBlMDVlYjZiLTRlNDMtYjk0ZS04NGU5LWZkNjdiYzJmYjA2ZSIgc3RFdnQ6d2hlbj0iMjAyNC0xMi0xMlQxMTo0MTozMCswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIyLjQgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8L3JkZjpEZXNjcmlw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',
        'doc' => '',
        'xls' => '',
        'ppt' => 'iVBORw0KGgoAAAANSUhEUgAAAJEAAACoCAYAAADgrQxGAAABJmlDQ1BBZG9iZSBSR0IgKDE5OTgpAAAoz2NgYDJwdHFyZRJgYMjNKykKcndSiIiMUmA/z8DGwMwABonJxQWOAQE+IHZefl4qAwb4do2BEURf1gWZxUAa4EouKCoB0n+A2CgltTiZgYHRAMjOLi8pAIozzgGyRZKywewNIHZRSJAzkH0EyOZLh7CvgNhJEPYTELsI6Akg+wtIfTqYzcQBNgfClgGxS1IrQPYyOOcXVBZlpmeUKBhaWloqOKbkJ6UqBFcWl6TmFit45iXnFxXkFyWWpKYA1ULcBwaCEIWgENMAarTQZKAyAMUDhPU5EBy+jGJnEGIIkFxaVAZlMjIZE+YjzJgjwcDgv5SBgeUPQsykl4FhgQ4DA/9UhJiaIQODgD4Dw745AMDGT/0ZOjZcAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFwGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNi4wLWMwMDYgNzkuZGFiYWNiYiwgMjAyMS8wNC8xNC0wMDozOTo0NCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIyLjQgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNC0xMi0xMlQxMjoxMDo0OCswMzowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjQtMTItMTJUMTI6MTIrMDM6MDAiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjQtMTItMTJUMTI6MTIrMDM6MDAiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjM2OTc4MmYwLTY1NDgtMWU0NS1hNDk4LTlkODI1NTFiYmZjMSIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOjgzOTU0Y2Q4LTI3N2QtMDk0MS1hZDNlLTAyNDljOWNkZTNiMiIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmFkYzFlY2E2LWQ5MTktMDY0Ny05NzRlLWQ5OTY1ZmE2MjA2ZiI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YWRjMWVjYTYtZDkxOS0wNjQ3LTk3NGUtZDk5NjVmYTYyMDZmIiBzdEV2dDp3aGVuPSIyMDI0LTEyLTEyVDEyOjEwOjQ4KzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjIuNCAoV2luZG93cykiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjM2OTc4MmYwLTY1NDgtMWU0NS1hNDk4LTlkODI1NTFiYmZjMSIgc3RFdnQ6d2hlbj0iMjAyNC0xMi0xMlQxMjoxMiswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIyLjQgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PrVe0pIAAA1TSURBVHja7Z15UJNnHscZZrtOZ5x1dnZ2Ort/bKc5gBCOEO4GMFaBqhxBDmXlJkW8aAUEpNQ1ZfEoBbmVUhBCTOOLnFoVKIIoR+siIgooW+tRISra7qEznc7ss4Ru3YIgvnnfJO/x++Mzg4Ahed/PfJ/fc75mCCGz+TirKXHdkxSLQvz9UUBAwLz4v+Bnc3++2O++7OvgfQ8v+l0875/I310QWRxKySlCVdjnqOvitVcWuhdU57lvDDbu841eaXeMy+Gc4nA4CDAwPB7izWDVbu8eUL/lQO3m1oHx39BWIk12VIqHHb8Zbq4p4SIuV9C+Qr7vcOXJfntaSfS3PJ98DqQPtWTiWbZ7xeyrrPvymz9RXiLtjcPOIZ7COrhxVISPhK7eLYkFp7ZRWqIze3zyeXDDKJ1KPL5Fu0fsx0e6791fQjmJ7o3UvZ4R4lzNhZtFC5ncYgpU5+5qKSWS2YO+PUgCN4hWuMUeVHXc/PZVykikbU9CtnBjaChSoerszQlKiGR2v20bsoGbQlORilSdNyeWmL45A4lojWtssclFwi+R0A5zcHYud3Z2LgVm4+L+Zqkjn4MZPZHiSlXd30y+QhuJ1pZ1Keg6x2MMHtX45eCSwMWhxkbAqZn+uoZQIsWVqS7cvv8KDSSyRDHNI1tAloX5R9emJKuXvp48FFTVnqz7f53Vf5UmBjgUE0qk+EOq3ltac+P3zvBK1HAZJHoB0x2VWFzXs2lU/vP//fHJdfPPdizP4RFIJddpkc6P3zWndhKBRC/kAV6JGobkc1+jJVWaTUQkl7gyNYW7+LoPPQgSkZlEDZfl871Oy05CInW4xB9WU7g5A4nITaL5JdJxIm0FIZGcY42TSNCcmTyJBuUver2WnQRFMkIiQWFN0eZslkjpRBOpVA1JRCMmW7dFky2Rjub0txSERIo5pAaJWFgTPS/SSmIiRRumRgKJTC1R/SU5ntdvmhaJT0Akp+gyDUjEuCQalOP9G41pq4iJFHVIAxKxtDkjVaSIUtJEMnsI40S0lEhHw05iIjlHkNNrgySisUQ66gmLVExYJLOJM5BEdJZIx/FUYsW2S0SBGpKI5RLpwFJWERTpoN4imU2BRLTrnS2EJmWlwkJvkbgdLpH6iWSmbQWJmJBEz0RKJiaSa2SuqmcC38I26J2RjBb3tMegnOz3cGzHW0REQq4RH6nO39O+9FJbPdYTQRJROYmeifTuimw+AZHconJVFyYeLIHC2gRM15hyKkg0U2wTFMk1Ok/VfXfxXSRQE9FgKQih7v+7UmKJFJOv6rozuQSSiIXN2awBSUIi6Xba5qs6by28QRKSiOFJRJpIcUWqrlvaV0nqnYFEVB0nWnSujWDTJk1r+gSSyBhd/DbDrGwki6b3lufoKxLfaW3re5prcVATsbQ5myuSviskHcKy65pH7r0GC/VZVljPu9Q2WV+ReMj7w44yghINgUQmWKhvCFpS9BPJas37p+qGJ9+AmojFzdlskfTZactHvnmXimHaAyQitPffKjj/VM/Xk+YgEYtrornURosL8aWRF8o4dStcv95Z/SWQiIES/fNSmUesC7408lD0H4EuvgF4iHcCtnFETpX33rLJrhSPRDYxNS16SgTrichLIi7yK2vLoMp7P5sflsTHIZEwcHdL49C3f4RpD5NKpDtI1bFG4u1zwNfXN8uU+PisVLg78I/gqous/FFO+20Ea6xN2pzRHSHarB5DUBOZtIvPAIk+G0Mw2Eh6EiUmClkl0SgkEekSnU/ZKGZbEkHvjFy+v9vyeppMXA4SQRIR4lzOGgWfNRJdB4kMwdMrhatDPKyVkEQgESHGK0LTBHyehh29M5DIYAwVr8uw4vPVXEgikIgIX5/M9gld4VwqtLRQ80EikIgIXzWVibPi/Xa7i13K3SSSYolEcpBauBeKbQVKS1zPawOJgHn47uTmLTZ4BxthAhb4JcPK+EQBJBFAhKu4JbqO9FgeC7s9mMw1fZII/wQsTHuARDB3BpheIqiJQKI5EkHvDCAmEUzAAmRIBGusAWjOANOPEzGxd9bT02NO5u9BEtG4d3b1dLHLtjXSXDeRfYW9valxrJDKonLjt7ybuCN9V/iujPTgzN2KwJyP8lcdrj0uOnW257fQnFFQoi+VkUm02Tkh9MKCNr6TuT39g8j9lSelPUM3zKE5o4BEXymDM+i5oEuApH4bchM/boyF5gwkIogFtiI08UBWdbc/NGcgEUFsMJmiJROSCCQiCB/z2lSYd2b4zjKQyIgS9TNKop8Qb8gtbx27uwyaM0giAvCQ2zufFUMSGekDDdSGJ1sycquNAFvzwWkFSGQE/t5W4Bbn5ZMn2xiRGRERkTSb8ORAH888kSWe3QkUwjIQ299xQ8oIieh+emyFDP8uU8+orLpKZaXLoZISacmClErLygq89+1JS9gWG7k3OiYmOzo6Ym+YbM2nq5a7NznaCS4QbdYcgyoOMUIius/iX9ppW4Xv5lmjhJOPCTclXyj3rdsW7FHvZC88p7dIfF8sq/GKPzRnJqY71QHnMS7Tn+HIZdLqEW1/jThdJm7TczASucrKi6E5M/UxLvpIVD1MalH7nyfDyyrjHE/zeNyL+NNoNbbn9OhqdjVnFDsMXa8kqh4ySM+obqtrC/40EiH/1ObdME5EO4muGkSiH7Ua6VZf207cIgnisZaJyd+zaI31IAMkGjbYGM2dEt8q/BKFoIK+cTfaSkT384nOU0yif9+rc9rui7PHZrEKJasurqfneiK29s4MKJGO1izvGh7ONBLKVdX03UYNSUQ6945F7hXglMgyRqlikURQEy16xk930i7cp+rbvYd1PdQupZ9EozBOZAgeXz6wfgV+iVDng0l6SvQQaiLyk2jsiCTCAqdEomTUNUXHJILC2iA8GjsqjhfoI9H9pTDtARL99HyPgdxAbw5+iajQnF01ziFXINGiEvWkbXHAK5FzJtY7pf01NGdQWM9wq1GehXfTJVd2SMOipSBDDEiiKwaVqK8guAjvsl77lBMVsBQEkmiGb7/uXFr0jqSei3OhXFhJbyp7kogRS0EMJ5G2LS1BwsU7AStDBy7ckdJTolHo4pNN7Vb3Jtyz+OIdWMd3/3oNlseCRGZjms3p7lzOAF6JbKM0VbQ+bu8+zefOqFITjTYrwsM99dgBwvdGu07cDIKF+iyfxR/C3o9dY4U/gWZwzcDOP3n6O1pLNMm6wUYrFK++Tsqa5v6mMq/diSEFLlw9BeK7ofAPe5Npf3os+7r4HPT2B/XPapC+vr7nTjTr7e01133/Z3T/njnjsbtj2QlMaV+YvTNxg6f1helu/AChDYxOSdjpxz9wYcsQDSXi/HTzF2Oh3ydnG7XFcpRweFRO+x2w6lE21kTUgCvN0Vz64elS2kvEhAfE0FIi502YevypGE4FoW1hbWJE6zBF66NA5pxPNAoSGRW7t7GtFUPR8IAYZhTWxke8DsusHw+kskCs3TJE9STi8fkaC48E9SdXfpBSXSCoiagoj1uoOuPTziA6yGPkcaJBkGgBLCytkMDKUmW9PEqpUJ5fTSd5YPMi7hvOxXh8gcZOJKoSiUQV+mBva1NtY2NTLbQWKB3eWl+emKqILVK3ugzc/p7WTy6CNdYveVZiUFZtJp1vNBTWVFhPpL4FD/6DcSKCEtUMg0QLMAwSvfR6IpAIaiLCW4ZAIpAIJIJpD2jOmFVYP2TnIVcgETRnhBfqg0RkJtHEGVZuGQKJoCYifKI+SESmRFPsPFEfJCJ12qMVaiKAyElp16F3BsC+M7P+VLwPzdNNwN4AiaCL/3/qNvLVOJ9PjzaU9CWDMCypia6fU7+xf6s8ISIsLDVsmtDQ0LSw/309Q+hahS0H/4OEuXaemsDQ0KxZr/WMyFT59pKE9nHtUqiJGJBE/TXxiSJTLHW1CEKlw1NukEQMSKKvlMEZXFNI5LQJqUcfWYJEDHjyoiklOjoyBRJBEhGV6AEfJGLAtMeXppTo2n1WSjTCtIX6Jk2i0ccC6J0ZTKIhdiQR1ETMqIkuKkPSeKaQyDEB1Y5MQRIxYdrj6rHU0FWWQpX4TUm5RCI5aBTeFJdb89eqCy4/8oIkYsncGQDP9gBgAhYAiRhw8CcA0x4ArLEGoIsPNRFAyoh1K0gEsPx8IgB6ZwArJWocA4kYzO06g68n4iCfvOM5cLGRWU9PjzkTP9eJ/WGpfMMm0czpq5jAXqTU9+hegMrYVPNx7Z7Raz0RAJCSRAAwd9qjdROyhgsC6CuRZlqix/1ZyB0uCKAXnij9xDfI7LvJtj8owpyOwgUB8GLlk4zVXpmymenWDRSsyxHARQFw4pz0eaXOnxmJntyoWh6z0rYBLgzw0s9zcwlvyLn4ZP0ziXTcVMl3OHI4rXCBgEVPVbFyaF75YV/+z+7MHoUtjMpwElp8zoULBSz0YECh/XGvtNNFv/TmuWHvmw0Zf/aRuCodeZBKwOzDwVzfjqjYVdMfPNeZheeG6svc/rI9FoUG+KG1a/1QgEyGZACrCPD3Q/4BgWiDfAfaq/wCjTz68VfzufJfGqT9BUiDUqUAAAAASUVORK5CYII=',
        'rar' => 'iVBORw0KGgoAAAANSUhEUgAAAJEAAACnCAYAAAAR+76TAAABJmlDQ1BBZG9iZSBSR0IgKDE5OTgpAAAoz2NgYDJwdHFyZRJgYMjNKykKcndSiIiMUmA/z8DGwMwABonJxQWOAQE+IHZefl4qAwb4do2BEURf1gWZxUAa4EouKCoB0n+A2CgltTiZgYHRAMjOLi8pAIozzgGyRZKywewNIHZRSJAzkH0EyOZLh7CvgNhJEPYTELsI6Akg+wtIfTqYzcQBNgfClgGxS1IrQPYyOOcXVBZlpmeUKBhaWloqOKbkJ6UqBFcWl6TmFit45iXnFxXkFyWWpKYA1ULcBwaCEIWgENMAarTQZKAyAMUDhPU5EBy+jGJnEGIIkFxaVAZlMjIZE+YjzJgjwcDgv5SBgeUPQsykl4FhgQ4DA/9UhJiaIQODgD4Dw745AMDGT/0ZOjZcAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFyWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNi4wLWMwMDYgNzkuZGFiYWNiYiwgMjAyMS8wNC8xNC0wMDozOTo0NCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIyLjQgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNC0xMi0xMlQxMjoxMzo0NSswMzowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjQtMTItMTJUMTI6MTU6MjArMDM6MDAiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjQtMTItMTJUMTI6MTU6MjArMDM6MDAiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjJlNTE2N2RmLTZlNTAtNjU0Mi1hODI4LTA2NDM5MzNlMGI1ZSIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOjI5YzAzNTgyLWE5YzQtZDM0OC1hNGM4LWNlNWQ3MzU3YjE2MyIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmI1YzVmNjI3LTRmNTItMWY0OS1hZmIxLTNjZThhMzJmMTgyZSI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YjVjNWY2MjctNGY1Mi0xZjQ5LWFmYjEtM2NlOGEzMmYxODJlIiBzdEV2dDp3aGVuPSIyMDI0LTEyLTEyVDEyOjEzOjQ1KzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjIuNCAoV2luZG93cykiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjJlNTE2N2RmLTZlNTAtNjU0Mi1hODI4LTA2NDM5MzNlMGI1ZSIgc3RFdnQ6d2hlbj0iMjAyNC0xMi0xMlQxMjoxNToyMCswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIyLjQgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8L3JkZjpEZXNjcmlw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',
        'pdf' => '',
        'mp4' => '',
        'mp3' => '',
        'file' => 'iVBORw0KGgoAAAANSUhEUgAAAGYAAABzCAYAAABqxHdKAAABJmlDQ1BBZG9iZSBSR0IgKDE5OTgpAAAoz2NgYDJwdHFyZRJgYMjNKykKcndSiIiMUmA/z8DGwMwABonJxQWOAQE+IHZefl4qAwb4do2BEURf1gWZxUAa4EouKCoB0n+A2CgltTiZgYHRAMjOLi8pAIozzgGyRZKywewNIHZRSJAzkH0EyOZLh7CvgNhJEPYTELsI6Akg+wtIfTqYzcQBNgfClgGxS1IrQPYyOOcXVBZlpmeUKBhaWloqOKbkJ6UqBFcWl6TmFit45iXnFxXkFyWWpKYA1ULcBwaCEIWgENMAarTQZKAyAMUDhPU5EBy+jGJnEGIIkFxaVAZlMjIZE+YjzJgjwcDgv5SBgeUPQsykl4FhgQ4DA/9UhJiaIQODgD4Dw745AMDGT/0ZOjZcAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFyWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNi4wLWMwMDYgNzkuZGFiYWNiYiwgMjAyMS8wNC8xNC0wMDozOTo0NCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIyLjQgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNC0xMi0xMlQxMjoyNjoyNyswMzowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjQtMTItMTJUMTI6Mjc6MzkrMDM6MDAiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjQtMTItMTJUMTI6Mjc6MzkrMDM6MDAiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjk5ODk2ZjAwLTEwNTEtMjc0Zi1iOTM2LWQ5NTdlZmU1OWEyNyIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOjM3NTZkMTRkLTc3MjUtOWE0MC05MzE5LTljYmM3NGYzMzljZiIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjRkMTVkY2YyLTE4NDEtN2U0YS1hYjE5LWU3YjhmMTk1NTg4ZCI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NGQxNWRjZjItMTg0MS03ZTRhLWFiMTktZTdiOGYxOTU1ODhkIiBzdEV2dDp3aGVuPSIyMDI0LTEyLTEyVDEyOjI2OjI3KzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjIuNCAoV2luZG93cykiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjk5ODk2ZjAwLTEwNTEtMjc0Zi1iOTM2LWQ5NTdlZmU1OWEyNyIgc3RFdnQ6d2hlbj0iMjAyNC0xMi0xMlQxMjoyNzozOSswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIyLjQgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8L3JkZjpEZXNjcmlw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',
    ];

    public function __construct($config = [])
    {
        $this->id = $config['id'];
        $this->objectId = $config['objectId'] ?? 0;
        $this->models = $this->getModels();
        $this->model = $this->getModelQuestion();
        $this->attributes = array_merge(array_values($this->attributes()), ['question_users_id', 'users_id', 'read_flag']);
        $this->attributesTypes = $this->getAttributesType();
        $this->attributesUnique = $this->getAttributesUnique();
        $this->optionsValues = $this->getOptionsValue();
        $this->addRules();
        $this->setAttributeLabels($this->labels());
//        echo '<pre>' . print_r($this->model, true) . '</pre>';

        parent::__construct($this->attributes, $config);
    }

    /**
     *  Нахождение id модели QuestionValue для имени атрибута
     * @param $id
     * @return |null
     */
    public function getValueId($attribute)
    {
        $values = ArrayHelper::map($this->loadValue(), 'name', 'question_value_id');
        return $values[$attribute];
    }

    public function getModels()
    {
        return QuestionAttribute::find()->where(['question_id' => $this->id])->orderBy('sort_order');
    }

    public function getModelQuestion()
    {
        return Question::findOne(['id' => $this->id]);
    }

    public function attributes()
    {
        return ArrayHelper::map($this->models->asArray()->all(), 'id', 'name');
    }

    public function getAttributesType()
    {
        return ArrayHelper::map($this->models->asArray()->all(), 'name', 'type_id');
    }

    public function getAttributesUnique()
    {
        return QuestionAttribute::find()->select('name')->where(['question_id' => $this->id])->where(['unique_flag' => 1])->column();
    }

    public function getOptionsValue()
    {
        $models = QuestionOptions::find()->innerJoin('question_attribute', 'question_attribute.id = question_options.attribute_id')
            ->where(['=', 'question_attribute.question_id', $this->id])->orderBy('question_options.name')->asArray()->all();
        return ArrayHelper::map($models, 'id', 'name');
    }

    private function addRules()
    {
        foreach ($this->models->asArray()->all() as $model) {
            if ($model['required'] == 1) {
                $this->addRule($model['name'], 'required');
            }
            if ($this->model->vid_id == Question::VID_OPEN) {
                $this->addRule('users_id', 'required');
            }
            switch ($model['type_id']) {
                case QuestionAttribute::TYPE_STRING :
                case QuestionAttribute::TYPE_TEXT :
                    $this->addRule($model['name'], 'string', ['max' => 1024]);
                    break;
                case QuestionAttribute::TYPE_DATE :
                    $this->addRule($model['name'], 'date');
                    break;
                case QuestionAttribute::TYPE_DATETIME :
                    $this->addRule($model['name'], 'datetime');
                    break;
                case QuestionAttribute::TYPE_EMAIL :
                    $this->addRule($model['name'], 'email');
                    break;
                case QuestionAttribute::TYPE_FILE :
                    $this->addRule($model['name'], 'file', ['skipOnEmpty' => true, 'extensions' => $this->fileExt, 'maxSize' => $this->fileSize]);
                    break;
                default:
                    $this->addRule($model['name'], 'safe');
            }
        }
    }

    private function labels()
    {
        $labels = ['question_users_id' => '#'];
        $labels += ['users_id' => 'Пользователь'];
        $labels += ['read_flag' => 'Статус'];
        $labels += ArrayHelper::map($this->models->asArray()->all(), 'name', 'label');
        return $labels;
    }

    public function attributeHints()
    {
        return ArrayHelper::map($this->models->asArray()->all(), 'name', 'hint');
    }

    private function loadQuery()
    {
        return QuestionValue::find()->select(
            'question_attribute.question_id as question_id,
                     question_attribute.type_id as type_id,
                     question_attribute.name as name,
                     question_users.users_id as users_id, 
                     question_users.read_flag as read_flag, 
                     question_users.id as question_users_id,
                     question_value.id as question_value_id,
                     question_value.question_attribute_id as question_attribute_id,
                     question_value.value_string as value_string,
                     question_value.question_option_list as question_option_list,
                     question_value.value_file as value_file'
        )
            ->innerJoin('question_users', 'question_users.id = question_value.question_users_id')
            ->innerJoin('question_attribute', 'question_attribute.id = question_value.question_attribute_id')
            ->where(['=', 'question_attribute.question_id', $this->id]);
    }

    private function loadValues()
    {
        return $this->loadQuery()->asArray()->all();
    }

    public function loadValue()
    {
        return $this->objectId ? $this->loadQuery()->andWhere(['=', 'question_users.id', $this->objectId])->asArray()->all() : [];
    }

    public function getDataArrayAll()
    {
        $data = [];
//        echo '<pre>' . print_r($this->loadValues(), true) . '</pre>'; die();
        foreach ($this->loadValues() as $model) {
            $data[$model['question_users_id']] = isset($data[$model['question_users_id']]) ? array_merge($data[$model['question_users_id']], $this->getDataManager($model)) : $this->getDataManager($model);
        }
        return ['data' => $data, 'attributes' => $this->labels(), 'types' => $this->attributesTypes];
    }

    public function getDataOne()
    {
        foreach ($this->loadValue() as $model) {
            $this->question_users_id = $model['question_users_id'];
            $this->users_id = $model['users_id'];
            $name = $model['name'];
            $this->$name = $this->getValue($model);
        }

        return $this;
    }

    public function getDataManager($model)
    {
        $user = User::findOne($model['users_id']);
        $data['question_id'] = $model['question_id'];
        $data['users_id'] = isset($user->userCommon) ? $user->userCommon->getFullName() : 'Гость';
        $data['read_flag'] = QuestionUsers::getReadValue($model['read_flag']);
        $data['question_users_id'] = $model['question_users_id'];
        $data[$model['name']] = $this->getValueManager($model);
        return $data;
    }

    protected function getValueManager($model) 
    {
        switch ($model['type_id']) {
            case QuestionAttribute::TYPE_TEXT :
                $value = mb_strlen($model['value_string'], 'UTF-8') > 200 ? mb_substr($model['value_string'], 0, 200, 'UTF-8') . '...' : $model['value_string'];
                break;
            case QuestionAttribute::TYPE_RADIOLIST :
            case QuestionAttribute::TYPE_RADIOLIST_UNIQUE :
                $value = $this->optionsValues[$model['question_option_list']] ?? $model['question_option_list'];
                break;
            case QuestionAttribute::TYPE_CHECKLIST :
            case QuestionAttribute::TYPE_CHECKLIST_UNIQUE :
                $values = [];
                foreach (explode(',', $model['question_option_list']) as $option_id) {
                    $values[] = $this->optionsValues[$option_id] ?? $option_id;
                }
                $value = implode(',', $values);
                break;
            case QuestionAttribute::TYPE_FILE :
                $value = self::getFileContent($model['value_file'], $model['value_string']);
                break;
            default:
                $value = $model['value_string'];
        }
        return $value;
    }

    protected function getValue($model)
    {
        switch ($model['type_id']) {
            case QuestionAttribute::TYPE_RADIOLIST :
            case QuestionAttribute::TYPE_RADIOLIST_UNIQUE :
                $value = $model['question_option_list'];
                break;
            case QuestionAttribute::TYPE_CHECKLIST :
            case QuestionAttribute::TYPE_CHECKLIST_UNIQUE :
                $value = explode(',', $model['question_option_list']);
                break;
            case QuestionAttribute::TYPE_FILE :
                $value = self::getFileContent($model['value_file'], $model['value_string']);
                break;
            default:
                $value = $model['value_string'];
        }
        return $value;
    }


    public function getForm($form, $item, $options = ['readonly' => false])
    {
        $form = $form->field($this, $item['name']);
        switch ($item['type_id']) {
            case QuestionAttribute::TYPE_STRING :
            case QuestionAttribute::TYPE_EMAIL :
                $form = $form->textInput(['maxlength' => true]);
                break;
            case QuestionAttribute::TYPE_TEXT :
                $form = $form->textarea(['rows' => 4]);
                break;
            case QuestionAttribute::TYPE_DATE :
                $form = $form->widget(MaskedInput::class, ['mask' => Yii::$app->settings->get('reading.date_mask')])->widget(DatePicker::class, ['disabled' => $options['readonly']]);
                break;
            case QuestionAttribute::TYPE_DATETIME :
                $form = $form->widget(MaskedInput::class, ['mask' => Yii::$app->settings->get('reading.date_time_mask')])->widget(DateTimePicker::class, ['disabled' => $options['readonly']]);
                break;
            case QuestionAttribute::TYPE_PHONE :
                $form = $form->widget(MaskedInput::class, ['mask' => Yii::$app->settings->get('reading.phone_mask')])->textInput();
                break;
            case QuestionAttribute::TYPE_RADIOLIST :
                $form = $form->radioList($this->getOptionsList($item['id']), ['itemOptions' => ['disabled' => $options['readonly']]]);
                break;
            case QuestionAttribute::TYPE_RADIOLIST_UNIQUE :
                $form = $form->radioList($this->getOptionsListUnique($item['id']), ['itemOptions' => ['disabled' => $options['readonly']]]);
                break;
            case QuestionAttribute::TYPE_CHECKLIST :
                $form = $form->checkboxList($this->getOptionsList($item['id']), ['itemOptions' => ['disabled' => $options['readonly']]]);
                break;
            case QuestionAttribute::TYPE_CHECKLIST_UNIQUE :
                $form = $form->checkboxList($this->getOptionsListUnique($item['id']), ['itemOptions' => ['disabled' => $options['readonly']]]);
                break;
            case QuestionAttribute::TYPE_FILE :
                $form = $form->fileInput(['disabled' => $options['readonly']]);
                break;
            default:
                $form = $form->textInput(['maxlength' => true]);
        }
        return $form->hint($item['hint']);
    }

    public function getOptionsList($id)
    {
        $modelOptions = QuestionOptions::find()->select(['id', 'name'])->where(['=', 'attribute_id', $id])->orderBy('name')->asArray()->all();
        return ArrayHelper::map($modelOptions, 'id', 'name');
    }

    public function getOptionsListUnique($id)
    {
        $opt_available = $this->getOptionsList($id);
        $query = $this->loadQuery()->andWhere(['question_attribute_id' => $id]);
        if ($this->objectId) $query = $query->andWhere(['!=', 'question_users_id', $this->objectId]);
        $query = $query->asArray()->all();
        $opt_okuppied = implode(',', ArrayHelper::getColumn($query, 'question_option_list'));

        foreach (explode(',', $opt_okuppied) as $key) {
            unset($opt_available[$key]);
        }
        return $opt_available;
    }

    public function save()
    {
        $modelName = StringHelper::basename($this::className());
        $data = Yii::$app->request->post();
        $user = QuestionUsers::findOne(['id' => $this->objectId, 'question_id' => $this->id]) ?? new QuestionUsers();
        $user->question_id = $this->id;
        $user->users_id = $data[$modelName]['users_id'] ?? Yii::$app->getUser()->getId();
        $valid = $user->validate();
        if ($valid) {
            $transaction = \Yii::$app->db->beginTransaction();
            try {
                if ($flag = $user->save(false)) {
                    foreach ($this->attributes() as $id => $attribute) {
                        $modelAttribute = QuestionValue::findOne(['question_users_id' => $user->id, 'question_attribute_id' => $id]) ?? new QuestionValue();
                        $modelAttribute->question_users_id = $user->id;
                        $modelAttribute->question_attribute_id = $id;

                        switch ($this->attributesTypes[$attribute]) {
                            case QuestionAttribute::TYPE_RADIOLIST :
                            case QuestionAttribute::TYPE_RADIOLIST_UNIQUE :
                                $modelAttribute->question_option_list = $data[$modelName][$attribute];
                                break;
                            case QuestionAttribute::TYPE_CHECKLIST :
                            case QuestionAttribute::TYPE_CHECKLIST_UNIQUE :
                                $modelAttribute->question_option_list = is_array($data[$modelName][$attribute]) ? implode(',', $data[$modelName][$attribute]) : $data[$modelName][$attribute];
                                break;
                            case QuestionAttribute::TYPE_FILE :
                                $file = UploadedFile::getInstanceByName('QuestionAnswers[' . $attribute . ']');
                                $slug_name = ArtHelper::slug($file->name);
                                $file->saveAs(Yii::getAlias('@runtime/cache') . DIRECTORY_SEPARATOR . $slug_name);
                                $modelAttribute->value_string = json_encode(['name' => $slug_name, 'extension' => $file->getExtension(), 'size' => $file->size]);
                                $modelAttribute->value_file = base64_encode(file_get_contents(Yii::getAlias('@runtime/cache') . DIRECTORY_SEPARATOR . $slug_name));
                                break;
                            default:
                                $modelAttribute->value_string = $data[$modelName][$attribute];
                        }
                        $flag = $this->validateAttribute($id, $attribute, $modelAttribute); // Валидация на уникальность
//                        echo '<pre>' . print_r($modelAttribute, true) . '</pre>';
                        if (!($flag && $flag = $modelAttribute->save(false))) {
                            $transaction->rollBack();
                            break;
                        }
                    }
                }
                if ($flag) {
                    $transaction->commit();
                    $this->objectId = $user->id;
                    $this->sendAuthorMessage();
                    $this->sendUserMessage();
                    return true;
                }
            } catch (\Exception $e) {
                $transaction->rollBack();
                print_r($e->getMessage());
                return false;
            }
        }
        return false;
    }

    public function delete($id)
    {
        return QuestionUsers::deleteAll(['id' => $id, 'question_id' => $this->id]);
    }

    protected function validateAttribute($id, $attribute, $modelAttribute)
    {
        $flag = true;
        if (in_array($attribute, $this->attributesUnique)) {
            $query = QuestionValue::find()->where(['question_attribute_id' => $id, 'value_string' => $modelAttribute->value_string]);
            if (isset($modelAttribute->id)) {
                $query = $query->andWhere(['!=', 'id', $modelAttribute->id]);
            }
            if ($query->exists()) {
                $flag = false;
                $this->addError($attribute, 'Запись с такими данными уже была введена.');
            }
        }
        return $flag;
    }

    /**
     * @return string
     */
    public static function getFileContent($valueFileBin, $file)
    {
        switch (json_decode($file, true)['extension'] ?? 'png') {
            case 'txt':
                $valueFile = self::fileIcon['txt'];
                break;
            case 'doc':
            case 'docx':
                $valueFile = self::fileIcon['doc'];
                break;
            case 'xls':
            case 'xlsx':
                $valueFile = self::fileIcon['xls'];
                break;
            case 'ppt':
            case 'pptx':
            case 'ppsx':
                $valueFile = self::fileIcon['ppt'];
                break;
            case 'zip':
                $valueFile = self::fileIcon['zip'];
                break;
            case 'rar':
                $valueFile = self::fileIcon['rar'];
                break;
            case 'pdf':
                $valueFile = self::fileIcon['pdf'];
                break;
            case 'mp4':
                $valueFile = self::fileIcon['mp4'];
                break;
            case 'mp3':
                $valueFile = self::fileIcon['mp3'];
                break;
            case 'JPEG':
            case 'jpg':
            case 'png':
                $valueFile = is_resource($valueFileBin) ? stream_get_contents($valueFileBin) : '';
                break;
            default:
                $valueFile = self::fileIcon['file'];
        }
        return 'data:image/png;base64,' . $valueFile;
    }

    public function sendMessage($user_id, $email)
    {
        $sender = false;

        if ($email) {
            $sender = Yii::$app->mailqueue->compose();

            $textBody = 'Сообщение модуля "Формы и заявки" ' . PHP_EOL;
            $htmlBody = '<p><b>Сообщение модуля "Формы и заявки"</b></p>';

            $textBody .= 'Вы успешно заполнили форму: ' . strip_tags($this->model->name) . PHP_EOL;
            $htmlBody .= '<p>Вы успешно заполнили форму: ' . strip_tags($this->model->name) . '</p>';

            if ($this->model->category_id == Question::CAT_TICKET) {
                $textBody .= 'Распечатайте или покажите на телефоне QR-код при посещении мероприятия.';
                $htmlBody .= '<p>Распечатайте или покажите на телефоне QR-код при посещении мероприятия.</p>';
                $sender = $this->addQrTicket($user_id, $sender);
            }
            $textBody .= '--------------------------' . PHP_EOL;
            $textBody .= 'Сообщение создано автоматически. Отвечать на него не нужно.';
            $htmlBody .= '<hr>';
            $htmlBody .= '<p>Сообщение создано автоматически. Отвечать на него не нужно.</p>';

            $sender->setFrom([Yii::$app->params['adminEmail'] => Yii::$app->name])
                ->setTo($email)
                ->setSubject('Сообщение с сайта ' . Yii::$app->name)
                ->setTextBody($textBody)
                ->setHtmlBody($htmlBody)
                ->queue();
        }
        return $sender;
    }

    public function addQrTicket($user_id, $sender)
    {
        $template = 'document/ticket.docx';
        $output_file_name = Yii::getAlias('@runtime/cache') . DIRECTORY_SEPARATOR . Yii::$app->getSecurity()->generateRandomString() . '_' . basename($template);

        $token = base64_encode(json_encode(['id' => $this->model->id, 'version' => $this->model->version, 'user_id' => $user_id]));
        $link = Yii::$app->urlManager->createAbsoluteUrl(['/question/default/validate', 'token' => $token], 'https');
        $data[] = [
            'rank' => 'doc',
            'name' => $this->model->name,
            'num' => sprintf('#%03d%05d', $this->model->id, $user_id),
            'description' => strip_tags($this->model->description)
        ];

        $data_qr[] = [
            'rank' => 'qr',
            'qr_code' => Link::widget([
                'outputDir' => '@runtime/qrcode',
                'outputDirWeb' => '@runtime/qrcode',
                'ecLevel' => QRcode::QR_ECLEVEL_L,
                'text' => $link,
                'size' => 3
            ]),
        ];
        $tbs = DocTemplate::get($template)->setHandler(function ($tbs) use ($data, $data_qr) {
            /* @var $tbs clsTinyButStrong */
            $tbs->MergeBlock('doc', $data);
            $tbs->MergeBlock('qr', $data_qr);

        })->prepare();
        $tbs->Show(OPENTBS_STRING, $output_file_name);
        file_put_contents($output_file_name, $tbs->Source);
        $sender->attach($output_file_name);

        return $sender;
    }

    public function sendAuthorMessage()
    {
        if ($this->model->email_author_flag) {
            $title = 'Сообщение модуля "Формы и заявки"';
            $content = '<p>Заполнена новая форма: ' . strip_tags($this->model->name) . '</p>';
            return Yii::$app->mailbox->mailing($this->model->author_id, $content, $title);
        }
    }

    /**
     * Отправляет сообщение на Емайл пользователя, или на заполненный Емайл, если есть такое поле.
     * @return bool
     */
    public function sendUserMessage()
    {
        $userEmail = null;
        if ($this->model->email_flag) {
            $user = QuestionUsers::findOne(['id' => $this->objectId, 'question_id' => $this->id]);
            if ($user->users_id) {
                $userModel = User::findOne($user->users_id);
                $userEmail = $userModel->email;
            } else {
                foreach ($this->attributes() as $id => $attribute) {
                    if ($this->attributesTypes[$attribute] == QuestionAttribute::TYPE_EMAIL) {
                        $modelAttribute = QuestionValue::findOne(['question_users_id' => $user->id, 'question_attribute_id' => $id]);
                        $userEmail = $modelAttribute->value_string;
                        break;
                    }
                }
            }
            return $this->sendMessage($user->id, $userEmail);
        }
        return true;
    }
}
